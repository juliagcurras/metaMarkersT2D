tkwm.title(tt, "Confirmación")
action <<- NA
tkgrid(tklabel(tt, text = "Vas a forzar la desinstalación y reinstalación en limpio del paquete Biostatech. ¿Proceder?"), padx = 10, pady = 20)
tkgrid(tkbutton(tt, text = "Sí", command = function() {action <<- TRUE; tkdestroy(tt)}), tkbutton(tt, text = "No", command = function() {action <<- FALSE; tkdestroy(tt)}), tkbutton(tt, text = "¡Odio la estadística y todo lo que representa!", command = function() {utils::browseURL("https://64.media.tumblr.com/87e76878f8bf29b16b7089c7795ee9b8/ff4e859fda5c4a4f-34/s540x810/93ef176706d02d8cce390867a9bd098e6f16d956.jpg"); action <<- FALSE; tkdestroy(tt)}), padx = 5, pady = 5, sticky = "ew")
tkfocus(tt)
tkwait.window(tt)
if (isTRUE(action)) {
require(pak, quietly = TRUE) || install.packages("pak")
if ("Biostatech" %in% rownames(installed.packages())) remove.packages("Biostatech")
pak::pkg_install("EquipoBiostatech/Biostatech@main")
message("Se ha desinstalado y reinstalado el paquete con éxito, es recomendable reiniciar la sesión de RStudio.")
library(Biostatech)
} else message("La acción ha sido cancelada.")
}
instalacionForzosa()
remove.packages("pak")
pak::pkg_install("EquipoBiostatech/Biostatech")
install.packages("pak")
pak::pkg_install("EquipoBiostatech/Biostatech")
library(Biostatech)
shiny::runApp('C:/Users/julia/Documents/GitHub/metaMarkersT2D/app')
runApp('C:/Users/julia/Documents/GitHub/metaMarkersT2D/app')
runApp('C:/Users/julia/Documents/GitHub/metaMarkersT2D/app')
runApp('C:/Users/julia/Documents/GitHub/pubmedtocsv/app')
runApp('C:/Users/julia/Documents/GitHub/metaMarkersT2D/app')
runApp('C:/Users/julia/Documents/GitHub/metaMarkersT2D/app')
shiny::runApp('C:/Users/julia/Documents/GitHub/metaMarkersT2D/app')
runApp('C:/Users/julia/Documents/GitHub/metaMarkersT2D/app')
runApp('C:/Users/julia/Documents/GitHub/metaMarkersT2D/app')
searchDataBasal <- function(df){
ids <- unique(df$ID)
dfBasal <- basal %>%
filter(ID %in% ids) %>%
dplyr::arrange(Reference) %>%
dplyr::select(Reference, Title:DOI, DataAdquisition, DIAMethod,
ComercialHouse:IntrumentModel,
ReferenceLibrary:SoftwareA, SampleSizeDiabetics:TypeOfSample,
TypeOfSample_2,
SoftwareDownstreamAnalysis:StatisticalTest,
AdjustedMethodDic, AdjustedMethod:Tool_FuncitonalAnalysis,
infoPvalue:RawData
)
return(dfBasal)
}
runApp('C:/Users/julia/Documents/GitHub/metaMarkersT2D/app')
runApp('C:/Users/julia/Documents/GitHub/metaMarkersT2D/app')
runApp('C:/Users/julia/Documents/GitHub/metaMarkersT2D/app')
runApp('C:/Users/julia/Documents/GitHub/metaMarkersT2D/app')
runApp('C:/Users/julia/Documents/GitHub/metaMarkersT2D/app')
View(data)
View(data)
runApp('C:/Users/julia/Documents/GitHub/metaMarkersT2D/app')
runApp('C:/Users/julia/Documents/GitHub/metaMarkersT2D/app')
## Filter
dfBasalImportant <- dfBasal %>%
dplyr::select(Reference, SampleSizeControls, SampleSizeDiabetics,
TypeOfSample, TypeOfSample_2, InfoFC, infoPvalue,
infoAdjustedPvalue, RawData) %>%
dplyr::rename(
`Sample size control group` = SampleSizeControls,
`Sample size T2DM group` = SampleSizeDiabetics,
`Type of sample` = TypeOfSample,
`Type of sample (grouped)` = TypeOfSample_2,
`Fold change data?` = InfoFC,
`P-value data?` = infoPvalue,
`Adjusted p-value data?` = infoAdjustedPvalue,
`Raw data?` = RawData
)
dfBasal <- basal %>%
filter(ID %in% ids) %>%
dplyr::arrange(Reference) %>%
dplyr::select(Reference, Title:DOI, DataAdquisition, DIAMethod,
ComercialHouse:IntrumentModel,
ReferenceLibrary:SoftwareA, SampleSizeDiabetics:TypeOfSample,
TypeOfSample_2,
SoftwareDownstreamAnalysis:StatisticalTest,
AdjustedMethodDic, AdjustedMethod:Tool_FuncitonalAnalysis,
infoPvalue:RawData
)
ids <- unique(df$ID)
dfBasal <- basal %>%
filter(ID %in% ids) %>%
dplyr::arrange(Reference) %>%
dplyr::select(Reference, Title:DOI, DataAdquisition, DIAMethod,
ComercialHouse:IntrumentModel,
ReferenceLibrary:SoftwareA, SampleSizeDiabetics:TypeOfSample,
TypeOfSample_2,
SoftwareDownstreamAnalysis:StatisticalTest,
AdjustedMethodDic, AdjustedMethod:Tool_FuncitonalAnalysis,
infoPvalue:RawData
)
searchProtein <- function(protein){
df <- data %>%
dplyr::filter(ProteinID == protein)
return(df)
}
runApp('C:/Users/julia/Documents/GitHub/metaMarkersT2D/app')
runApp('C:/Users/julia/Documents/GitHub/metaMarkersT2D/app')
runApp('C:/Users/julia/Documents/GitHub/metaMarkersT2D/app')
citation()
citation("Amanida")
citation("amanida")
citation("meta")
citation("rbioapi")
citation("clusterProfiler")
shiny::runApp('C:/Users/julia/Documents/GitHub/metaMarkersT2D/app')
runApp('C:/Users/julia/Documents/GitHub/metaMarkersT2D/app')
protein <- "P12830"
protein
Libraries
# Loading data ####
basal <- readRDS(file = "basalDatabase.rds")
sample = "All"
test = "All"
country = "All"
acquisition = "All"
df <- data %>%
dplyr::filter(ProteinID == protein)
View(df)
## Filter
df <- df %>%
dplyr::select(ID, Reference, ProteinName:pvalAdj) %>%
dplyr::arrange(Reference) %>%
rename(
`Protein name or gene name` = ProteinName,
`Protein description` = ProteinDescription,
`P-value` = pval,
`Adjusted p-value` = pvalAdj)
View(df)
ids <- df$ID
ids
basal %>%
filter(ID %in% ids)
View(basal)
unique(data$ID)
unique(basal$ID)
data$ID <- gsub(data$ID, "_Pro", "")
gsub(x = data$ID, pattern = "_Pro", replacement = "")
data <- readRDS(file = "completeDatabase.rds")
setwd("C:/Users/julia/Documents/GitHub/metaMarkersT2D/app")
# Loading data ####
basal <- readRDS(file = "basalDatabase.rds")
data <- readRDS(file = "completeDatabase.rds")
data$ID <- gsub(x = data$ID, pattern = "_Pro", replacement = "")
unique(data$ID)
length(unique(data$ID))
ids
basal <- readRDS(file = "basalDatabase.rds")
data <- readRDS(file = "completeDatabase.rds")
data$ID <- gsub(x = data$ID, pattern = "_Pro", replacement = "")
df <- data %>%
dplyr::filter(ProteinID == protein)
ids <- df$ID
ids
runApp()
"1027_15" %in% dfBasal$ID
dfBasal <- basal %>%
filter(ID %in% ids) %>%
dplyr::arrange(Reference) %>%
dplyr::select(ID, Reference, Title:DOI, DataAdquisition, DIAMethod,
ComercialHouse:IntrumentModel,
ReferenceLibrary:SoftwareA, SampleSizeDiabetics:TypeOfSample,
TypeOfSample_2,
SoftwareDownstreamAnalysis:StatisticalTest,
AdjustedMethodDic, AdjustedMethod:Tool_FuncitonalAnalysis,
infoPvalue:RawData
)
"1027_15" %in% dfBasal$ID
### Global file
# Libraries
library(dplyr)
library(shiny)
library(shinycustomloader)
library(bslib)
library(DT)
library(plotly)
library(Hmisc)
library(ggplot2)
# Loading data ####
basal <- readRDS(file = "basalDatabase.rds")
data <- readRDS(file = "completeDatabase.rds")
data$ID <- gsub(x = data$ID, pattern = "_Pro", replacement = "")
js <- c(
"function(row, data, num, index){",
"  var $row = $(row);",
"  if($row.hasClass('even')){",
"    $row.css('background-color', 'white');",
"    $row.hover(function(){",
"      $(this).css('background-color', 'lightgrey');",
"     }, function(){",
"      $(this).css('background-color', 'white');",
"     }",
"    );",
"  }else{",
"    $row.css('background-color', '#EDFDFA');",
"    $row.hover(function(){",
"      $(this).css('background-color', 'lightgrey');",
"     }, function(){",
"      $(this).css('background-color', '#EDFDFA');",
"     }",
"    );",
"  }",
"}"
)
searchProtein <- function(protein, sample = "All", test = "All",
acquisition = "All", country = "All"){
df <- data %>%
dplyr::filter(ProteinID == protein)
# type os sample filter
if (!(sample == "All")){
ids <- basal %>%
dplyr::filter(TypeOfSample_2 == sample) %>%
pull(ID)
df <- df %>% dplyr::filter(ID %in% ids)
}
# Type of test filter
if (!(test == "All")){
ids <- basal %>%
dplyr::filter(StatisticalTest == test) %>%
pull(ID)
df <- df %>% dplyr::filter(ID %in% ids)
}
# Type of acquisition mode
if (!(acquisition == "All")){
ids <- basal %>%
dplyr::filter(DataAdquisition == acquisition) %>%
pull(ID)
df <- df %>% dplyr::filter(ID %in% ids)
}
# country
if (!(country == "All")){
ids <- basal %>%
dplyr::filter(Country == country) %>%
pull(ID)
df <- df %>% dplyr::filter(ID %in% ids)
}
return(df)
}
searchDataBasal <- function(df){
ids <- df$ID
if ("1027_15_Pla" %in% ids){
ids <- gsub(x = ids, pattern = "_Pla", replacement = "")
typeSample <- "Plasma"
} else if ("1027_15_Sal" %in% ids){
ids <- gsub(x = ids, pattern = "_Sal", replacement = "")
typeSample <- "Saliva"
}
dfBasal <- basal %>%
filter(ID %in% ids) %>%
dplyr::arrange(Reference) %>%
dplyr::select(ID, Reference, Title:DOI, DataAdquisition, DIAMethod,
ComercialHouse:IntrumentModel,
ReferenceLibrary:SoftwareA, SampleSizeDiabetics:TypeOfSample,
TypeOfSample_2,
SoftwareDownstreamAnalysis:StatisticalTest,
AdjustedMethodDic, AdjustedMethod:Tool_FuncitonalAnalysis,
infoPvalue:RawData
)
if ("1027_15" %in% dfBasal$ID){
dfBasal[which(dfBasal$ID == "1027_15"), "TypeOfSample"] <- typeSample
}
return(dfBasal)
}
runApp()
runApp()
runApp()
searchDataBasal <- function(df){
ids <- df$ID
if ("1027_15_Pla" %in% ids){
ids <- gsub(x = ids, pattern = "_Pla", replacement = "")
typeSample <- "Plasma"
} else if ("1027_15_Sal" %in% ids){
ids <- gsub(x = ids, pattern = "_Sal", replacement = "")
typeSample <- "Saliva"
}
dfBasal <- basal %>%
filter(ID %in% ids) %>%
dplyr::arrange(Reference) %>%
dplyr::select(ID, Reference, Title:DOI, DataAdquisition, DIAMethod,
ComercialHouse, IntrumentModel,
ReferenceLibrary:SoftwareA, SampleSizeDiabetics:TypeOfSample,
TypeOfSample_2,
SoftwareDownstreamAnalysis:StatisticalTest,
AdjustedMethodDic, AdjustedMethod:Tool_FuncitonalAnalysis,
infoPvalue:RawData
)
dfBasal$Link <- paste0(
"<a href='", dfBasal$Link, "' target='_blank'>", dfBasal$Link,"</a>"
)
if ("1027_15" %in% dfBasal$ID){
dfBasal[which(dfBasal$ID == "1027_15"), "TypeOfSample"] <- typeSample
}
return(dfBasal)
}
runApp()
runApp()
basal$DOI
runApp()
dfBasal$DOI <- paste0(
"<a href='https://doi.org/", dfBasal$DOI, "' target='_blank'>", dfBasal$DOI,"</a>"
)
dfBasal$DOI
# Loading data ####
basal <- readRDS(file = "basalDatabase.rds")
basal$DOI <- paste0(
"<a href='https://doi.org/", basal$DOI, "' target='_blank'>", basal$DOI,"</a>"
)
basal$DOI <- paste0(
"<a href='https://doi.org/", basal$DOI, "' target='_blank'>", basal$DOI,"</a>"
)
basal$DOI
# Libraries
library(dplyr)
library(shiny)
library(shinycustomloader)
library(bslib)
library(DT)
library(plotly)
library(Hmisc)
library(ggplot2)
# Loading data ####
basal <- readRDS(file = "basalDatabase.rds")
basal$DOI <- paste0(
"<a href='https://doi.org/", basal$DOI, "' target='_blank'>", basal$DOI,"</a>"
)
data <- readRDS(file = "completeDatabase.rds")
data$ID <- gsub(x = data$ID, pattern = "_Pro", replacement = "")
# Global variables ####
js <- c(
"function(row, data, num, index){",
"  var $row = $(row);",
"  if($row.hasClass('even')){",
"    $row.css('background-color', 'white');",
"    $row.hover(function(){",
"      $(this).css('background-color', 'lightgrey');",
"     }, function(){",
"      $(this).css('background-color', 'white');",
"     }",
"    );",
"  }else{",
"    $row.css('background-color', '#EDFDFA');",
"    $row.hover(function(){",
"      $(this).css('background-color', 'lightgrey');",
"     }, function(){",
"      $(this).css('background-color', '#EDFDFA');",
"     }",
"    );",
"  }",
"}"
)
# Functions ####
searchProtein <- function(protein, sample = "All", test = "All",
acquisition = "All", country = "All"){
df <- data %>%
dplyr::filter(ProteinID == protein)
# type os sample filter
if (!(sample == "All")){
ids <- basal %>%
dplyr::filter(TypeOfSample_2 == sample) %>%
pull(ID)
df <- df %>% dplyr::filter(ID %in% ids)
}
# Type of test filter
if (!(test == "All")){
ids <- basal %>%
dplyr::filter(StatisticalTest == test) %>%
pull(ID)
df <- df %>% dplyr::filter(ID %in% ids)
}
# Type of acquisition mode
if (!(acquisition == "All")){
ids <- basal %>%
dplyr::filter(DataAdquisition == acquisition) %>%
pull(ID)
df <- df %>% dplyr::filter(ID %in% ids)
}
# country
if (!(country == "All")){
ids <- basal %>%
dplyr::filter(Country == country) %>%
pull(ID)
df <- df %>% dplyr::filter(ID %in% ids)
}
return(df)
}
searchDataBasal <- function(df){
ids <- df$ID
if ("1027_15_Pla" %in% ids){
ids <- gsub(x = ids, pattern = "_Pla", replacement = "")
typeSample <- "Plasma"
} else if ("1027_15_Sal" %in% ids){
ids <- gsub(x = ids, pattern = "_Sal", replacement = "")
typeSample <- "Saliva"
}
dfBasal <- basal %>%
filter(ID %in% ids) %>%
dplyr::arrange(Reference) %>%
dplyr::select(ID, Reference, Title:DOI, DataAdquisition, DIAMethod,
ComercialHouse, IntrumentModel,
ReferenceLibrary:SoftwareA, SampleSizeDiabetics:TypeOfSample,
TypeOfSample_2,
SoftwareDownstreamAnalysis:StatisticalTest,
AdjustedMethodDic, AdjustedMethod:Tool_FuncitonalAnalysis,
infoPvalue:RawData
)
if ("1027_15" %in% dfBasal$ID){
dfBasal[which(dfBasal$ID == "1027_15"), "TypeOfSample"] <- typeSample
}
return(dfBasal)
}
runApp()
View(basal)
# Libraries
library(dplyr)
library(shiny)
library(shinycustomloader)
library(bslib)
library(DT)
library(plotly)
library(Hmisc)
library(ggplot2)
# Loading data ####
basal <- readRDS(file = "basalDatabase.rds")
# basal$DOI <- paste0(
#   "<a href='https://doi.org/", basal$DOI, "' target='_blank'>", basal$DOI,"</a>"
# )
data <- readRDS(file = "completeDatabase.rds")
data$ID <- gsub(x = data$ID, pattern = "_Pro", replacement = "")
# Global variables ####
js <- c(
"function(row, data, num, index){",
"  var $row = $(row);",
"  if($row.hasClass('even')){",
"    $row.css('background-color', 'white');",
"    $row.hover(function(){",
"      $(this).css('background-color', 'lightgrey');",
"     }, function(){",
"      $(this).css('background-color', 'white');",
"     }",
"    );",
"  }else{",
"    $row.css('background-color', '#EDFDFA');",
"    $row.hover(function(){",
"      $(this).css('background-color', 'lightgrey');",
"     }, function(){",
"      $(this).css('background-color', '#EDFDFA');",
"     }",
"    );",
"  }",
"}"
)
# Functions ####
searchProtein <- function(protein, sample = "All", test = "All",
acquisition = "All", country = "All"){
df <- data %>%
dplyr::filter(ProteinID == protein)
# type os sample filter
if (!(sample == "All")){
ids <- basal %>%
dplyr::filter(TypeOfSample_2 == sample) %>%
pull(ID)
df <- df %>% dplyr::filter(ID %in% ids)
}
# Type of test filter
if (!(test == "All")){
ids <- basal %>%
dplyr::filter(StatisticalTest == test) %>%
pull(ID)
df <- df %>% dplyr::filter(ID %in% ids)
}
# Type of acquisition mode
if (!(acquisition == "All")){
ids <- basal %>%
dplyr::filter(DataAdquisition == acquisition) %>%
pull(ID)
df <- df %>% dplyr::filter(ID %in% ids)
}
# country
if (!(country == "All")){
ids <- basal %>%
dplyr::filter(Country == country) %>%
pull(ID)
df <- df %>% dplyr::filter(ID %in% ids)
}
return(df)
}
searchDataBasal <- function(df){
ids <- df$ID
if ("1027_15_Pla" %in% ids){
ids <- gsub(x = ids, pattern = "_Pla", replacement = "")
typeSample <- "Plasma"
} else if ("1027_15_Sal" %in% ids){
ids <- gsub(x = ids, pattern = "_Sal", replacement = "")
typeSample <- "Saliva"
}
dfBasal <- basal %>%
filter(ID %in% ids) %>%
dplyr::arrange(Reference) %>%
dplyr::select(ID, Reference, Title:DOI, DataAdquisition, DIAMethod,
ComercialHouse, IntrumentModel,
ReferenceLibrary:SoftwareA, SampleSizeDiabetics:TypeOfSample,
TypeOfSample_2,
SoftwareDownstreamAnalysis:StatisticalTest,
AdjustedMethodDic, AdjustedMethod:Tool_FuncitonalAnalysis,
infoPvalue:RawData
)
if ("1027_15" %in% dfBasal$ID){
dfBasal[which(dfBasal$ID == "1027_15"), "TypeOfSample"] <- typeSample
}
return(dfBasal)
}
runApp()
