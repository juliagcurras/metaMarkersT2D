"    $row.css('background-color', 'white');",
"    $row.hover(function(){",
"      $(this).css('background-color', 'lightgrey');",
"     }, function(){",
"      $(this).css('background-color', 'white');",
"     }",
"    );",
"  }else{",
"    $row.css('background-color', '#EDFDFA');",
"    $row.hover(function(){",
"      $(this).css('background-color', 'lightgrey');",
"     }, function(){",
"      $(this).css('background-color', '#EDFDFA');",
"     }",
"    );",
"  }",
"}"
)
rowCallback = DT::JS(js),
js <- c(
"function(row, data, num, index){",
"  var $row = $(row);",
"  if($row.hasClass('even')){",
"    $row.css('background-color', 'white');",
"    $row.hover(function(){",
"      $(this).css('background-color', 'lightgrey');",
"     }, function(){",
"      $(this).css('background-color', 'white');",
"     }",
"    );",
"  }else{",
"    $row.css('background-color', '#EDFDFA');",
"    $row.hover(function(){",
"      $(this).css('background-color', 'lightgrey');",
"     }, function(){",
"      $(this).css('background-color', '#EDFDFA');",
"     }",
"    );",
"  }",
"}"
)ยก
js <- c(
"function(row, data, num, index){",
"  var $row = $(row);",
"  if($row.hasClass('even')){",
"    $row.css('background-color', 'white');",
"    $row.hover(function(){",
"      $(this).css('background-color', 'lightgrey');",
"     }, function(){",
"      $(this).css('background-color', 'white');",
"     }",
"    );",
"  }else{",
"    $row.css('background-color', '#EDFDFA');",
"    $row.hover(function(){",
"      $(this).css('background-color', 'lightgrey');",
"     }, function(){",
"      $(this).css('background-color', '#EDFDFA');",
"     }",
"    );",
"  }",
"}"
)
DT::datatable(df, extensions = "Buttons", rownames = F, escape = F,
options = list(ordering = F, dom = "Brft", scrollY = '500px',
scrollX = T, pageLength = nrow(df),
# columnDefs = list(list(className = 'dt-center', targets = '_all')),
full_width = TRUE, rowCallback = DT::JS(js),
buttons = list(list(extend = "copy"),
list(extend = "csv"),
list(extend = "excel")))) %>%
DT::formatStyle(1, font = 'bold')
# Selecting protein data
df <- data %>%
dplyr::filter(ProteinID == protein)
ids <- df$ID
# Protein information
df <- df %>%
dplyr::select(Reference, ProteinName:pvalAdj) %>%
rename(
`Protein name or gene name` = ProteinName,
`Protein description` = ProteinDescription,
`P-value` = pval,
`Adjusted p-value` = pvalAdj)
DT::datatable(df, extensions = "Buttons", rownames = F, escape = F,
options = list(ordering = F, dom = "Brft", scrollY = '500px',
scrollX = T, pageLength = nrow(df),
# columnDefs = list(list(className = 'dt-center', targets = '_all')),
full_width = TRUE, rowCallback = DT::JS(js),
buttons = list(list(extend = "copy"),
list(extend = "csv"),
list(extend = "excel")))) %>%
DT::formatStyle(1, font = 'bold')
DT::datatable(df, extensions = "Buttons", rownames = F, escape = F,
options = list(ordering = F, dom = "Brft", scrollY = '500px',
scrollX = T, pageLength = nrow(df),
# columnDefs = list(list(className = 'dt-center', targets = '_all')),
full_width = TRUE, rowCallback = DT::JS(js),
buttons = list(list(extend = "copy"),
list(extend = "csv"),
list(extend = "excel")))) %>%
DT::formatStyle(1, font = 'bold') %>%
DT::formatRound(4:ncol(df), digits = 3)
# Basal info tablas
dfBasal <- basal %>%
filter(ID %in% ids) %>%
dplyr::select(Reference, Title:DOI, DataAdquisition, DIAMethod,
ComercialHouse:IntrumentModel,
ReferenceLibrary:SoftwareA, SampleSizeDiabetics:TypeOfSample,
TypeOfSample_2,
SoftwareDownstreamAnalysis:StatisticalTest,
AdjustedMethodDic, DataImputation:Tool_FuncitonalAnalysis,
infoPvalue:RawData
)
DT::datatable(dfBasalImportant, extensions = "Buttons", rownames = F, escape = F,
options = list(ordering = F, dom = "Brft", scrollY = '500px',
scrollX = T, pageLength = nrow(dfBasalImportant),
# columnDefs = list(list(className = 'dt-center', targets = '_all')),
full_width = TRUE, rowCallback = DT::JS(js),
buttons = list(list(extend = "copy"),
list(extend = "csv"),
list(extend = "excel")))) %>%
DT::formatStyle(1, font = 'bold')
View(basal)
View(dfBasalImportant)
# Selecting protein data
df <- data %>%
dplyr::filter(ProteinID == protein)
ids <- df$ID
# Protein information
df <- df %>%
dplyr::select(Reference, ProteinName:pvalAdj) %>%
dplyr::arrange(Reference) %>%
rename(
`Protein name or gene name` = ProteinName,
`Protein description` = ProteinDescription,
`P-value` = pval,
`Adjusted p-value` = pvalAdj)
DT::datatable(df, extensions = "Buttons", rownames = F, escape = F,
options = list(ordering = F, dom = "Brft", scrollY = '500px',
scrollX = T, pageLength = nrow(df),
# columnDefs = list(list(className = 'dt-center', targets = '_all')),
full_width = TRUE, rowCallback = DT::JS(js),
buttons = list(list(extend = "copy"),
list(extend = "csv"),
list(extend = "excel")))) %>%
DT::formatStyle(1, font = 'bold') %>%
DT::formatRound(4:ncol(df), digits = 3)
# Basal info tablas
dfBasal <- basal %>%
filter(ID %in% ids) %>%
dplyr::arrange(Reference) %>%
dplyr::select(Reference, Title:DOI, DataAdquisition, DIAMethod,
ComercialHouse:IntrumentModel,
ReferenceLibrary:SoftwareA, SampleSizeDiabetics:TypeOfSample,
TypeOfSample_2,
SoftwareDownstreamAnalysis:StatisticalTest,
AdjustedMethodDic, DataImputation:Tool_FuncitonalAnalysis,
infoPvalue:RawData
)
dfBasalImportant <- dfBasal %>%
dplyr::select(Reference, SampleSizeControls, SampleSizeDiabetics,
TypeOfSample, TypeOfSample_2, InfoFC, infoPvalue,
infoAdjustedPvalue)
DT::datatable(dfBasalImportant, extensions = "Buttons", rownames = F, escape = F,
options = list(ordering = F, dom = "Brft", scrollY = '500px',
scrollX = T, pageLength = nrow(dfBasalImportant),
# columnDefs = list(list(className = 'dt-center', targets = '_all')),
full_width = TRUE, rowCallback = DT::JS(js),
buttons = list(list(extend = "copy"),
list(extend = "csv"),
list(extend = "excel")))) %>%
DT::formatStyle(1, font = 'bold')
dfBasalImportant <- dfBasal %>%
dplyr::select(Reference, SampleSizeControls, SampleSizeDiabetics,
TypeOfSample, TypeOfSample_2, InfoFC, infoPvalue,
infoAdjustedPvalue) %>%
dplyr::rename(
`Sample size control group` = SampleSizeControls,
`Sample size T2DM group` = SampleSizeDiabetics,
`Type of sample` = TypeOfSample,
`Type of sample (grouped)` = TypeOfSample_2,
`Fold change data?` = InfoFC,
`P-value data?` = infoPvalue,
`Adjusted p-value data?` = infoAdjustedPvalue
)
DT::datatable(dfBasalImportant, extensions = "Buttons", rownames = F, escape = F,
options = list(ordering = F, dom = "Brft", scrollY = '500px',
scrollX = T, pageLength = nrow(dfBasalImportant),
# columnDefs = list(list(className = 'dt-center', targets = '_all')),
full_width = TRUE, rowCallback = DT::JS(js),
buttons = list(list(extend = "copy"),
list(extend = "csv"),
list(extend = "excel")))) %>%
DT::formatStyle(1, font = 'bold')
dfBasalPaper <- dfBasal %>%
dplyr::select(Reference, Title:DOI)
View(dfBasalPaper)
dfBasalPaper <- dfBasal %>%
dplyr::select(Reference, Title:DOI)
DT::datatable(dfBasalPaper, extensions = "Buttons", rownames = F, escape = F,
options = list(ordering = F, dom = "Brft", scrollY = '500px',
scrollX = T, pageLength = nrow(dfBasalPaper),
# columnDefs = list(list(className = 'dt-center', targets = '_all')),
full_width = TRUE, rowCallback = DT::JS(js),
buttons = list(list(extend = "copy"),
list(extend = "csv"),
list(extend = "excel")))) %>%
DT::formatStyle(1, font = 'bold')
DT::datatable(dfBasalPaper, extensions = "Buttons", rownames = F, escape = F,
options = list(ordering = F, dom = "Brft", scrollY = '500px',
scrollX = T, pageLength = nrow(dfBasalPaper),
columnDefs = list(list(width = '300px', targets = 3)),
full_width = TRUE, rowCallback = DT::JS(js),
buttons = list(list(extend = "copy"),
list(extend = "csv"),
list(extend = "excel")))) %>%
DT::formatStyle(1, font = 'bold')
DT::datatable(dfBasalPaper, extensions = "Buttons", rownames = F, escape = F,
options = list(ordering = F, dom = "Brft", scrollY = '500px',
scrollX = T, pageLength = nrow(dfBasalPaper),
columnDefs = list(list(width = '350px', targets = 3)),
full_width = F, rowCallback = DT::JS(js),
buttons = list(list(extend = "copy"),
list(extend = "csv"),
list(extend = "excel")))) %>%
DT::formatStyle(1, font = 'bold')
DT::datatable(dfBasalPaper, extensions = "Buttons", rownames = F, escape = F,
options = list(ordering = F, dom = "Brft", scrollY = '500px',
scrollX = T, pageLength = nrow(dfBasalPaper),
columnDefs = list(list(width = '350px', targets = 2)),
full_width = F, rowCallback = DT::JS(js),
buttons = list(list(extend = "copy"),
list(extend = "csv"),
list(extend = "excel")))) %>%
DT::formatStyle(1, font = 'bold')
DT::datatable(dfBasalPaper, extensions = "Buttons", rownames = F, escape = F,
options = list(ordering = F, dom = "Brft", scrollY = '500px',
scrollX = T, pageLength = nrow(dfBasalPaper),
columnDefs = list(list(width = '350px', targets = 2)),
full_width = T, rowCallback = DT::JS(js),
buttons = list(list(extend = "copy"),
list(extend = "csv"),
list(extend = "excel")))) %>%
DT::formatStyle(1, font = 'bold')
DT::datatable(dfBasalPaper, extensions = "Buttons", rownames = F, escape = F,
options = list(ordering = F, dom = "Brft", scrollY = '500px',
scrollX = T, pageLength = nrow(dfBasalPaper),
columnDefs = list(list(width = '350px', targets = 2)),
escape = FALSE,
class = 'cell-border stripe',
callback = JS("
table.columns(2).nodes().to$().css({'white-space': 'normal'});
"),
full_width = T, rowCallback = DT::JS(js),
buttons = list(list(extend = "copy"),
list(extend = "csv"),
list(extend = "excel")))) %>%
DT::formatStyle(1, font = 'bold')
DT::datatable(dfBasalPaper, extensions = "Buttons", rownames = F, escape = F,
options = list(ordering = F, dom = "Brft", scrollY = '500px',
scrollX = T, pageLength = nrow(dfBasalPaper),
columnDefs = list(list(width = '350px', targets = 2)),
escape = FALSE,
class = 'cell-border stripe',
callback = JS::JS("
table.columns(2).nodes().to$().css({'white-space': 'normal'});
"),
full_width = T, rowCallback = DT::JS(js),
buttons = list(list(extend = "copy"),
list(extend = "csv"),
list(extend = "excel")))) %>%
DT::formatStyle(1, font = 'bold')
DT::datatable(dfBasalPaper, extensions = "Buttons", rownames = F, escape = F,
options = list(ordering = F, dom = "Brft", scrollY = '500px',
scrollX = T, pageLength = nrow(dfBasalPaper),
columnDefs = list(list(width = '350px', targets = 2)),
escape = FALSE,
class = 'cell-border stripe',
callback = DT::JS("
table.columns(2).nodes().to$().css({'white-space': 'normal'});
"),
full_width = T, rowCallback = DT::JS(js),
buttons = list(list(extend = "copy"),
list(extend = "csv"),
list(extend = "excel")))) %>%
DT::formatStyle(1, font = 'bold')
DT::datatable(dfBasalPaper, extensions = "Buttons", rownames = F, escape = F,
options = list(ordering = F, dom = "Brft", scrollY = '500px',
scrollX = T, pageLength = nrow(dfBasalPaper),
columnDefs = list(list(width = '300px', targets = 2)),
full_width = T, rowCallback = DT::JS(js),
buttons = list(list(extend = "copy"),
list(extend = "csv"),
list(extend = "excel")))) %>%
DT::formatStyle(1, font = 'bold')
DT::datatable(dfBasalPaper, extensions = "Buttons", rownames = F, escape = F,
options = list(ordering = F, dom = "Brft", scrollY = '500px',
scrollX = T, pageLength = nrow(dfBasalPaper),
columnDefs = list(list(width = '50%', targets = 2)),
full_width = T, rowCallback = DT::JS(js),
buttons = list(list(extend = "copy"),
list(extend = "csv"),
list(extend = "excel")))) %>%
DT::formatStyle(1, font = 'bold')
DT::datatable(dfBasalPaper, extensions = "Buttons", rownames = F, escape = F,
options = list(ordering = F, dom = "Brft", scrollY = '500px',
scrollX = T, pageLength = nrow(dfBasalPaper),
columnDefs = list(list(width = '50%', targets = 2)),
autoWidth = TRUE, rowCallback = DT::JS(js),
buttons = list(list(extend = "copy"),
list(extend = "csv"),
list(extend = "excel")))) %>%
DT::formatStyle(1, font = 'bold')
# Table 2
dfBasalPaper <- dfBasal %>%
dplyr::select(Reference, Title:DOI)
dfBasalPaper$Abstract <- paste0(
"<div style='max-width:300px; white-space:normal;'>",
dfBasalPaper$Abstract,
"</div>"
)
DT::datatable(dfBasalPaper, extensions = "Buttons", rownames = F, escape = F,
options = list(ordering = F, dom = "Brft", scrollY = '500px',
scrollX = T, pageLength = nrow(dfBasalPaper),
columnDefs = list(list(width = '50%', targets = 2)),
full_width = T, rowCallback = DT::JS(js),
buttons = list(list(extend = "copy"),
list(extend = "csv"),
list(extend = "excel")))) %>%
DT::formatStyle(1, font = 'bold')
DT::datatable(dfBasalPaper, extensions = "Buttons", rownames = F, escape = F,
options = list(ordering = F, dom = "Brft", scrollY = '500px',
scrollX = T, pageLength = nrow(dfBasalPaper),
# columnDefs = list(list(width = '50%', targets = 2)),
full_width = T, rowCallback = DT::JS(js),
buttons = list(list(extend = "copy"),
list(extend = "csv"),
list(extend = "excel")))) %>%
DT::formatStyle(1, font = 'bold')
DT::datatable(dfBasalPaper, extensions = "Buttons", rownames = F, escape = T,
options = list(ordering = F, dom = "Brft", scrollY = '500px',
scrollX = T, pageLength = nrow(dfBasalPaper),
# columnDefs = list(list(width = '50%', targets = 2)),
full_width = T, rowCallback = DT::JS(js),
buttons = list(list(extend = "copy"),
list(extend = "csv"),
list(extend = "excel")))) %>%
DT::formatStyle(1, font = 'bold')
DT::datatable(dfBasalPaper, extensions = "Buttons", rownames = F, escape = F,
options = list(ordering = F, dom = "Brft", scrollY = '500px',
scrollX = T, pageLength = nrow(dfBasalPaper),
# columnDefs = list(list(width = '50%', targets = 2)),
auto_width = T, rowCallback = DT::JS(js),
buttons = list(list(extend = "copy"),
list(extend = "csv"),
list(extend = "excel")))) %>%
DT::formatStyle(1, font = 'bold')
DT::datatable(dfBasalPaper, extensions = "Buttons", rownames = F, escape = F,
options = list(ordering = F, dom = "Brft", scrollY = '500px',
scrollX = T, pageLength = nrow(dfBasalPaper),
columnDefs = list(list(width = '200px', targets = 2)),
auto_width = T, rowCallback = DT::JS(js),
buttons = list(list(extend = "copy"),
list(extend = "csv"),
list(extend = "excel")))) %>%
DT::formatStyle(1, font = 'bold')
DT::datatable(dfBasalPaper, extensions = "Buttons", rownames = F, escape = F,
options = list(ordering = F, dom = "Brft", scrollY = '500px',
scrollX = T, pageLength = nrow(dfBasalPaper),
columnDefs = list(list(width = '300px', targets = 2)),
auto_width = T, rowCallback = DT::JS(js),
buttons = list(list(extend = "copy"),
list(extend = "csv"),
list(extend = "excel")))) %>%
DT::formatStyle(1, font = 'bold')
DT::datatable(dfBasalPaper, extensions = "Buttons", rownames = F, escape = F,
options = list(ordering = F, dom = "Brft", scrollY = '500px',
scrollX = T, pageLength = nrow(dfBasalPaper),
# columnDefs = list(list(width = '300px', targets = 2)),
autoWidth = T, rowCallback = DT::JS(js),
buttons = list(list(extend = "copy"),
list(extend = "csv"),
list(extend = "excel")))) %>%
DT::formatStyle(1, font = 'bold')
DT::datatable(dfBasalPaper, extensions = "Buttons", rownames = F, escape = F,
options = list(ordering = F, dom = "Brft", scrollY = '500px',
scrollX = T, pageLength = nrow(dfBasalPaper),
columnDefs = list(list(width = '300px', targets = 2)),
callback = JS("table.columns(2).nodes().to$().css({'white-space': 'normal'});"),
rownames = FALSE,
autoWidth = T, rowCallback = DT::JS(js),
buttons = list(list(extend = "copy"),
list(extend = "csv"),
list(extend = "excel")))) %>%
DT::formatStyle(1, font = 'bold')
DT::datatable(dfBasalPaper, extensions = "Buttons", rownames = F, escape = F,
options = list(ordering = F, dom = "Brft", scrollY = '500px',
scrollX = T, pageLength = nrow(dfBasalPaper),
columnDefs = list(list(width = '300px', targets = 2)),
callback = DT::JS("table.columns(2).nodes().to$().css({'white-space': 'normal'});"),
rownames = FALSE,
autoWidth = T, rowCallback = DT::JS(js),
buttons = list(list(extend = "copy"),
list(extend = "csv"),
list(extend = "excel")))) %>%
DT::formatStyle(1, font = 'bold')
DT::datatable(dfBasalPaper, extensions = "Buttons", rownames = F, escape = F,
options = list(ordering = F, dom = "Brft", scrollY = '500px',
scrollX = T, pageLength = nrow(dfBasalPaper),
full_width = T, rowCallback = DT::JS(js),
buttons = list(list(extend = "copy"),
list(extend = "csv"),
list(extend = "excel")))) %>%
DT::formatStyle(1, font = 'bold') %>%
DT::formatStyle(
columns = colnames(dfBasalPaper),  # Aplica el estilo a todas las columnas
target = 'row',
whiteSpace = 'nowrap'  # Evita que el contenido se ajuste dentro de las celdas
)
# Table 2
dfBasalPaper <- dfBasal %>%
dplyr::select(Reference, Title:DOI)
DT::datatable(dfBasalPaper, extensions = "Buttons", rownames = F, escape = F,
options = list(ordering = F, dom = "Brft", scrollY = '500px',
scrollX = T, pageLength = nrow(dfBasalPaper),
full_width = T, rowCallback = DT::JS(js),
buttons = list(list(extend = "copy"),
list(extend = "csv"),
list(extend = "excel")))) %>%
DT::formatStyle(1, font = 'bold') %>%
DT::formatStyle(
columns = colnames(dfBasalPaper),  # Aplica el estilo a todas las columnas
target = 'row',
whiteSpace = 'nowrap'  # Evita que el contenido se ajuste dentro de las celdas
)
# Table 2
dfBasalPaper <- dfBasal %>%
dplyr::select(Reference, Country::DOI, Title:Authors)
# Table 2
dfBasalPaper <- dfBasal %>%
dplyr::select(Reference, Country:DOI, Title:Authors)
DT::datatable(dfBasalPaper, extensions = "Buttons", rownames = F, escape = F,
options = list(ordering = F, dom = "Brft", scrollY = '500px',
scrollX = T, pageLength = nrow(dfBasalPaper),
full_width = T, rowCallback = DT::JS(js),
buttons = list(list(extend = "copy"),
list(extend = "csv"),
list(extend = "excel")))) %>%
DT::formatStyle(1, font = 'bold') %>%
DT::formatStyle(
columns = colnames(dfBasalPaper),  # Aplica el estilo a todas las columnas
target = 'row',
whiteSpace = 'nowrap'  # Evita que el contenido se ajuste dentro de las celdas
)
# Table 3
dfBasalProteomics <- dfBasal %>%
dplyr::select(Reference, DataAdquisition:SoftwareA,
Normalization:Tool_FuncitonalAnalysis)
DT::datatable(dfBasalProteomics, extensions = "Buttons", rownames = F, escape = F,
options = list(ordering = F, dom = "Brft", scrollY = '500px',
scrollX = T, pageLength = nrow(dfBasalProteomics),
# columnDefs = list(list(className = 'dt-center', targets = '_all')),
full_width = TRUE, rowCallback = DT::JS(js),
buttons = list(list(extend = "copy"),
list(extend = "csv"),
list(extend = "excel")))) %>%
DT::formatStyle(1, font = 'bold')
# Basal info tablas
dfBasal <- basal %>%
filter(ID %in% ids) %>%
dplyr::arrange(Reference) %>%
dplyr::select(Reference, Title:DOI, DataAdquisition, DIAMethod,
ComercialHouse:IntrumentModel,
ReferenceLibrary:SoftwareA, SampleSizeDiabetics:TypeOfSample,
TypeOfSample_2,
SoftwareDownstreamAnalysis:StatisticalTest,
AdjustedMethodDic, AdjustedMethod:Tool_FuncitonalAnalysis,
infoPvalue:RawData
)
# Table 3
dfBasalProteomics <- dfBasal %>%
dplyr::select(Reference, DataAdquisition:SoftwareA,
Normalization:Tool_FuncitonalAnalysis)
colnames(dfBasalProteomics) <- c(
"Reference", "Data acquisition mode", "DIA method", "Comercial house",
"Type of MS", "Instrument model", "Reference library",
"Identification & Quantification software", "Normalization", "Statistical test",
"Adjusted p-values?", ""
)
# Table 3
dfBasalProteomics <- dfBasal %>%
dplyr::select(Reference, DataAdquisition:SoftwareA,
Normalization:Tool_FuncitonalAnalysis)
colnames(dfBasalProteomics)
colnames(dfBasalProteomics) <- c(
"Reference", "Data acquisition mode", "DIA method", "Comercial house",
"Type of MS", "Instrument model", "Reference library",
"Identification & Quantification software", "Normalization", "Statistical test",
"Adjusted p-values?", "Method of adjustment", "Data imputation?",
"Type of imputation", "Functional analysis?", "Tool for functional analysis"
)
colnames(dfBasalProteomics)
DT::datatable(dfBasalProteomics, extensions = "Buttons", rownames = F, escape = F,
options = list(ordering = F, dom = "Brft", scrollY = '500px',
scrollX = T, pageLength = nrow(dfBasalProteomics),
# columnDefs = list(list(className = 'dt-center', targets = '_all')),
full_width = TRUE, rowCallback = DT::JS(js),
buttons = list(list(extend = "copy"),
list(extend = "csv"),
list(extend = "excel")))) %>%
DT::formatStyle(1, font = 'bold')
